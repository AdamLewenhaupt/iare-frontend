// Generated by CoffeeScript 1.9.3
var createIcon, createIcons, dimFactory, elbow, lightFactory, loc;

loc = void 0;

elbow = function(d, i) {
  return "M" + d.source.x + "," + d.source.y + "V" + ((d.target.y + d.source.y) / 2) + "H" + d.target.x + "V" + d.target.y;
};

$(function() {
  var height, i, margin, parts, svg, tree, url, width;
  url = window.parent.location.href;
  parts = url.split('/');
  loc = parts[parts.length - 1];
  if (loc === "d3testing.html") {
    margin = {
      top: 80,
      right: 120,
      bottom: 20,
      left: 400
    };
    width = 960 - margin.left - margin.right;
    height = 500 - margin.top - margin.bottom;
    i = 0;
    tree = d3.layout.tree().size([height, width]).nodeSize([300]);
    svg = d3.select("body").append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append('g').attr('transform', "translate(" + margin.left + ", " + margin.top + ")");
    return d3.json("tree.json", function(err, json) {
      var update;
      update = function(source) {
        var link, links, node, nodeEnter, nodes;
        nodes = tree.nodes(json).reverse();
        links = tree.links(nodes);
        nodes.forEach(function(d) {
          d.y = d.depth * 100;
        });
        node = svg.selectAll('g.node').data(nodes, function(d) {
          return d.id || (d.id = ++i);
        });
        nodeEnter = node.enter().append('g').attr('class', 'node').attr('transform', function(d) {
          return 'translate(' + d.x + ',' + d.y + ')';
        });
        nodeEnter.append('circle').attr('r', 30).style('fill', '#fff');
        nodeEnter.append('text').attr('y', function(d) {
          if (d.children || d._children) {
            return 0;
          } else {
            return 0;
          }
        }).attr('dx', '40px').attr('text-anchor', 'left').text(function(d) {
          return d.name;
        }).style('fill-opacity', 1);
        link = svg.selectAll('path.link').data(links, function(d) {
          return d.target.id;
        });
        link.enter().insert('path', 'g').attr('class', 'link').attr('d', elbow);
      };
      return update(json);
    });
  }
});

lightFactory = function(icon) {
  return function() {
    return icon.attr({
      fill: '#fff'
    });
  };
};

dimFactory = function(icon) {
  return function() {
    return icon.attr({
      fill: '#000'
    });
  };
};

createIcon = function(name, href) {
  var paper;
  paper = Snap("#" + name + "-icon");
  return Snap.load("/imgs/" + name + "-icon.svg", function(f) {
    var icon;
    icon = f.select('#icon');
    paper.append(icon);
    return $("#" + name + "-icon").hover(lightFactory(icon)).mouseleave(dimFactory(icon)).click(function() {
      return window.location.href = href;
    });
  });
};

createIcons = function(list) {
  var icon, j, len, results;
  results = [];
  for (j = 0, len = list.length; j < len; j++) {
    icon = list[j];
    results.push(createIcon(icon.name, icon.href));
  }
  return results;
};

$(function() {
  if (loc !== "d3testing.html") {
    return createIcons([
      {
        name: "iare",
        href: "/"
      }, {
        name: "cluster",
        href: "/cluster.html"
      }, {
        name: "cal",
        href: "/cal.html"
      }, {
        name: "news",
        href: "/news.html"
      }
    ]);
  }
});
