// Generated by CoffeeScript 1.9.3
var createIcon, createIcons, dimFactory, elbow, isCluster, lightFactory;

$(function() {
  var $cal, loc, parts, url;
  url = window.parent.location.href;
  parts = url.split('/');
  loc = parts[parts.length - 1];
  if (loc === "cal.html") {
    return $cal = $("#cal").fullCalendar({
      aspectRatio: 1
    });
  }
});

isCluster = function(d) {
  return d.name === "CLUSTER";
};

elbow = function(d, i) {
  if (isCluster(d.target.parent)) {
    return "M" + d.source.x + "," + d.source.y + "V" + d.target.y + "H" + d.target.x + "V" + d.target.y;
  } else if (d.target.parent.isSmall) {
    return "M" + d.source.x + "," + d.source.y + "V" + d.target.y + "H" + d.target.x + "V" + d.target.y;
  } else if (d.target.children === void 0) {
    return "M" + d.source.x + "," + d.source.y + "V" + (d.target.y - 40) + "H" + d.target.x + "V" + d.target.y;
  } else {
    return "M" + d.source.x + "," + d.source.y + "V" + ((d.target.y + d.source.y) / 2) + "H" + d.target.x + "V" + d.target.y;
  }
};

$(function() {
  var i, loc, margin, parts, screenHeight, screenWidth, svg, tree, url, width;
  screenWidth = $(window).width();
  screenHeight = $(window).height();
  url = window.parent.location.href;
  parts = url.split('/');
  loc = parts[parts.length - 1];
  if (loc === "cluster.html") {
    margin = {
      top: 40,
      right: 120,
      bottom: 20,
      left: screenWidth / 2
    };
    width = screenWidth / 5;
    i = 0;
    tree = d3.layout.tree();
    svg = d3.select("#tree").append('g').attr('transform', "translate(" + margin.left + ", " + margin.top + ")");
    svg.append("defs").append("pattern").attr("id", "test").attr("width", 60).attr("height", 60).append("image").attr("xlink:href", "/imgs/test.jpg").attr("width", 60).attr("height", 60);
    return d3.json("tree.json", function(err, json) {
      var update;
      update = function(source) {
        var currentDepth, j, link, links, maxHeight, node, nodeEnter, nodes;
        nodes = tree.nodes(json);
        links = tree.links(nodes);
        j = 0;
        currentDepth = 0;
        maxHeight = 0;
        nodes.forEach(function(d) {
          var y;
          if (currentDepth < d.depth) {
            if (d.parent === void 0 || !d.parent.isSmall) {
              j = 0;
            } else {
              j--;
            }
          }
          currentDepth = d.depth;
          j++;
          y = d.depth * 100;
          if (d.parent !== void 0) {
            d.x = d.parent.x - d.parent.children.length * width / 2 + (d.parent.children.indexOf(d) + 0.5) * width;
          }
          if (d.parent !== void 0 && d.parent.name === "CLUSTER") {
            d.isSmall = true;
            d.x = d.parent.x + 60;
            y = y - 150 + (j - 1) * 120;
          } else if (d.parent !== void 0 && d.parent.isSmall) {
            d.x = d.parent.x + 60;
            y = d.parent.y + 50;
          } else if (d.children === void 0) {
            if (d.parent.children.length < 6) {
              d.x = d.parent.x + 60;
              y = y - 50 + j * 80;
            } else {
              d.x = d.parent.x + (j % 2 === 0 ? -200 : 60);
              y = y - 50 + (j / 2) * 80;
            }
          }
          maxHeight = y > maxHeight ? y : maxHeight;
          return d.y = y;
        });
        $("#tree").height(maxHeight + 80);
        node = svg.selectAll('g.node').data(nodes, function(d) {
          return d.id || (d.id = ++i);
        });
        nodeEnter = node.enter().append('g').attr('class', 'node').attr('transform', function(d) {
          return 'translate(' + d.x + ',' + d.y + ')';
        });
        nodeEnter.append('circle').attr('r', 30).style('fill', '#fff').style("fill", function(d) {
          if (isCluster(d)) {
            return "none";
          } else {
            return "url(#test)";
          }
        }).style("stroke", function(d) {
          if (isCluster(d)) {
            return "none";
          }
        }).on("click", function(d) {
          return alert(d.name);
        });
        nodeEnter.append('text').attr('y', function(d) {
          if (d.children || d._children) {
            return 0;
          } else {
            return 0;
          }
        }).attr('dx', '40px').attr('text-anchor', 'left').text(function(d) {
          return d.name;
        }).style('fill-opacity', function(d) {
          if (d.name === "CLUSTER") {
            return 0;
          } else {
            return 1;
          }
        });
        link = svg.selectAll('path.link').data(links, function(d) {
          return d.target.id;
        });
        link.enter().insert('path', 'g').attr('class', 'link').attr('d', elbow);
      };
      return update(json);
    });
  }
});

lightFactory = function(icon) {
  return function() {
    return icon.attr({
      fill: '#fff'
    });
  };
};

dimFactory = function(icon) {
  return function() {
    return icon.attr({
      fill: '#000'
    });
  };
};

createIcon = function(name, href) {
  var paper;
  console.log("called");
  paper = Snap("#" + name + "-icon");
  return Snap.load("/imgs/" + name + "-icon.svg", function(f) {
    var icon;
    icon = f.select('#icon');
    paper.append(icon);
    return $("#" + name + "-icon").hover(lightFactory(icon)).mouseleave(dimFactory(icon)).click(function() {
      return window.location.href = href;
    });
  });
};

createIcons = function(list) {
  var icon, k, len, results;
  results = [];
  for (k = 0, len = list.length; k < len; k++) {
    icon = list[k];
    results.push(createIcon(icon.name, icon.href));
  }
  return results;
};

$(function() {
  var loc, parts, url;
  url = window.parent.location.href;
  parts = url.split('/');
  loc = parts[parts.length - 1];
  return createIcons([
    {
      name: "iare",
      href: "/"
    }, {
      name: "cluster",
      href: "/cluster.html"
    }, {
      name: "cal",
      href: "/cal.html"
    }
  ]);
});
